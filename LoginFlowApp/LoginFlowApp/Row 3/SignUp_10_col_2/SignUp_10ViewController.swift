//
//  SignUp_10ViewController.swift
//  LoginFlowApp
//
//  Created by Thanos on 28/12/19.
//  Copyright (c) 2019 Thanos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignUp_10DisplayLogic: class
{
  func displaySomething(viewModel: SignUp_10.Something.ViewModel)
}

class SignUp_10ViewController: UIViewController, SignUp_10DisplayLogic, UIGestureRecognizerDelegate
{
  var interactor: SignUp_10BusinessLogic?
  var router: (NSObjectProtocol & SignUp_10RoutingLogic & SignUp_10DataPassing)?
  var position: CGPoint?
  var originalSignInViewRect: CGRect?
  var originalSignUpViewRect: CGRect?
  var aspectRatio: CGFloat?
  var doRememberMe: Bool = false
    
    override var preferredStatusBarStyle: UIStatusBarStyle{
        return .lightContent
    }

   // @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var containerView: UIView!
    
    @IBOutlet weak var signInView: UIView!
    @IBOutlet weak var createAccountButton: UIButton!
    @IBOutlet weak var navBarView: UIView!
    @IBOutlet weak var credentialsView: UIView!
    
    @IBOutlet weak var backgroundImageView: UIImageView!
    
    @IBOutlet weak var signInLbl: UILabel!
    @IBOutlet weak var logoImageView: UIImageView!
    @IBOutlet weak var userNameTxtField: UITextField!
    @IBOutlet weak var signInPasswordTxtField: UITextField!
    @IBOutlet weak var rememberMeBtn: UIButton!
    @IBOutlet weak var rememberMeLbl: UILabel!
    @IBOutlet weak var forgotPassword: UIButton!
    @IBOutlet weak var signInButton: UIButton!
    @IBOutlet weak var signInWithfbBtn: UIButton!
    
    
    @IBOutlet weak var signUplbl: UILabel!
    @IBOutlet weak var firstnameTxtField: UITextField!
    @IBOutlet weak var lastNameTxtField: UITextField!
    @IBOutlet weak var emailTxtField: UITextField!
    @IBOutlet weak var passwordTxtField: UITextField!
    @IBOutlet weak var confirmpasswordTxtField: UITextField!
    @IBOutlet weak var signUpWithfb: UIButton!
 
    
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SignUp_10Interactor()
    let presenter = SignUp_10Presenter()
    let router = SignUp_10Router()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    if self.revealViewController() != nil {
        self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())
    }
    setupUI()
    originalSignInViewRect = signInView.frame
    originalSignUpViewRect = credentialsView.frame
    doSomething()
  }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.barStyle = .black
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = SignUp_10.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: SignUp_10.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    func setupUI(){
        credentialsView.layer.shadowColor = UIColor.lightGray.cgColor
        credentialsView.layer.shadowOffset = CGSize(width: 1, height: 1)
        credentialsView.layer.shadowOpacity = 1
        
        UIApplication.shared.statusBarView?.backgroundColor = UIColor.appStatusBarRed
        
        navBarView.backgroundColor = .appRed
        createAccountButton.backgroundColor = .appRed
        
//        scrollView.frame = CGRect(x: 0, y: 62, width: self.view.frame.width, height: self.view.frame.height-62)
        //self.view.addSubview(scrollView)
        
        containerView.frame = CGRect(x: 0, y: 0, width: self.view.frame.width, height: 667)
        //self.scrollView.addSubview(containerView)
        
        backgroundImageView.frame = containerView.frame
        
        setupSignInView()
        credentialsView.frame = CGRect(x: 9, y: 70, width: self.containerView.frame.width-2*9, height: 475)
        setupSignUpView()
        
        aspectRatio = credentialsView.frame.width/credentialsView.frame.height
        
        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(didPan(_:)))
        let panGesture2 = UIPanGestureRecognizer(target: self, action: #selector(didPan(_:)))
        //panGesture.delegate = self
            self.signInView.addGestureRecognizer(panGesture)
            self.credentialsView.addGestureRecognizer(panGesture2)
        
        signInView.tag = 1
        credentialsView.tag = 0
//
//
//        let transistion = CATransition()
//        transistion.type = .reveal
//        transistion.subtype = CATransitionSubtype.fromTop
//        transistion.duration = 0.3
//         self.containerView.layer.add(transistion, forKey: nil)
        
       
    }
    
    func setupSignInView(){
        signInView.frame = CGRect(x: 21.5, y: 40, width: self.view.frame.width-2*21.5, height: 441.5)
        signInLbl.frame = CGRect(x: 0, y: 0, width: signInView.frame.width, height: 63)

        logoImageView.layer.cornerRadius = logoImageView.frame.width/2
        logoImageView.clipsToBounds = true
        logoImageView.frame = CGRect(x: (self.signInView.frame.width-90)/2, y: 55, width: 90, height: 90)
        
        userNameTxtField.frame = CGRect(x: 13, y: 170, width: signInView.frame.width-26, height: 44)
        
        signInPasswordTxtField.frame = CGRect(x: 13, y: 227, width: signInView.frame.width-26, height: 44)
        
        rememberMeBtn.frame = CGRect(x: 11.5, y: 300, width: 17, height: 17)
        rememberMeLbl.frame = CGRect(x: 32.5, y: 298, width: 112, height: 21)
        forgotPassword.frame = CGRect(x: signInPasswordTxtField.frame.origin.x+signInPasswordTxtField.frame.width-137, y: 298, width: 137, height: 21)
        
        self.signInButton.frame = CGRect(x: self.signInButton.frame.origin.x, y: self.signInView.frame.height-114, width: self.signInView.frame.width-26, height: self.signInButton.frame.height)
        self.signInWithfbBtn.frame = CGRect(x: self.signInWithfbBtn.frame.origin.x, y: self.signInView.frame.height-57, width: self.signInView.frame.width-26, height: self.signInWithfbBtn.frame.height)
    }
    
    func setupSignUpView(){
        signUplbl.frame = CGRect(x: 0, y: 0, width: credentialsView.frame.width, height: 63)
        firstnameTxtField.frame = CGRect(x: 13, y: 63, width: credentialsView.frame.width-2*13, height: 44)
        lastNameTxtField.frame = CGRect(x: 13, y: 120, width: credentialsView.frame.width-2*13, height: 44)
        emailTxtField.frame = CGRect(x: 13, y: 177, width: credentialsView.frame.width-2*13, height: 44)
        passwordTxtField.frame = CGRect(x: 13, y: 234, width: credentialsView.frame.width-2*13, height: 44)
        confirmpasswordTxtField.frame = CGRect(x: 13, y: 291, width: credentialsView.frame.width-2*13, height: 44)
        createAccountButton.frame = CGRect(x: 13, y: 361, width: credentialsView.frame.width-2*13, height: 44)
        signUpWithfb.frame = CGRect(x: 13, y: 418, width: credentialsView.frame.width-2*13, height: 44)
    }
    
    @objc func didPan(_ sender: UIPanGestureRecognizer){
        
        let initialPosY = signInView.frame.origin.y
        let intiallPosY2 = self.credentialsView.frame.origin.y
        let translation = sender.translation(in: self.view)
        
      switch sender.state {
        case .began, .changed:
            
            DispatchQueue.main.async {
                
            
            
                print(initialPosY < (initialPosY + translation.y))
                if sender.view!.tag == 0 {
                    

                    self.signInView.frame = CGRect(x: self.signInView.frame.origin.x - (self.signInView.frame.origin.x/self.signInView.frame.origin.y)*translation.y*30/475, y: self.signInView.frame.origin.y + translation.y*30/475, width: (self.signInView.frame.height + translation.y*30/475)*(self.originalSignInViewRect?.width)!/(self.originalSignInViewRect?.height)!, height: self.signInView.frame.height+translation.y*30/475)
                    
                    self.credentialsView.frame.origin.y += translation.y
                    

                    self.signInLbl.frame = CGRect(x: self.signInLbl.frame.origin.x, y: self.signInLbl.frame.origin.y, width: self.signInView.frame.width, height: self.signInLbl.frame.height)

                    self.logoImageView.frame = CGRect(x: (self.signInView.frame.width-90)/2, y: 71+translation.y/2*30/475, width: 90, height: 90)

                    self.userNameTxtField.frame = CGRect(x: self.userNameTxtField.frame.origin.x, y: self.userNameTxtField.frame.origin.y+translation.y/2*30/475, width: self.signInView.frame.width-26, height: self.userNameTxtField.frame.height)

                    self.signInPasswordTxtField.frame = CGRect(x: self.signInPasswordTxtField.frame.origin.x, y: self.signInPasswordTxtField.frame.origin.y+translation.y/2*30/475, width: self.signInView.frame.width-26, height: self.signInPasswordTxtField.frame.height)

                    self.rememberMeBtn.frame = CGRect(x: 11.5, y: 290+translation.y*30/475, width: 17, height: 17)
                    self.rememberMeLbl.frame = CGRect(x: 32.5, y: 288+translation.y*30/475, width: 112, height: 21)
                    self.forgotPassword.frame = CGRect(x: self.signInPasswordTxtField.frame.origin.x+self.signInPasswordTxtField.frame.width-137, y: 288+translation.y*30/475, width: 137, height: 21)

                    self.signInButton.frame = CGRect(x: self.signInButton.frame.origin.x, y: self.signInView.frame.height-114, width: self.signInView.frame.width-26, height: self.signInButton.frame.height)

                    self.signInWithfbBtn.frame = CGRect(x: self.signInWithfbBtn.frame.origin.x, y: self.signInView.frame.height-57, width: self.signInView.frame.width-26, height: self.signInWithfbBtn.frame.height)

                    

                    if initialPosY < (initialPosY + translation.y){
                            self.signInLbl.alpha = 1
                            self.userNameTxtField.alpha = 1
                            self.signInButton.alpha = 1
                            self.signInPasswordTxtField.alpha = 1

                            self.signInView.layoutIfNeeded()
                            self.signInView.backgroundColor = self.credentialsView.backgroundColor

                    }
                     if initialPosY > (initialPosY + translation.y){

                        self.credentialsView.alpha += 0.3
                        self.signInLbl.alpha -= 0.25
                        self.userNameTxtField.alpha -= 0.25
                        self.signInButton.alpha -= 0.25
                        self.signInPasswordTxtField.alpha -= 0.1
                        self.signInView.layoutIfNeeded()
                        self.signInView.backgroundColor = UIColor(red: 237/255, green: 238/255, blue: 239/255, alpha: 1)
                    }

                    sender.setTranslation(CGPoint.zero, in: self.view)
               
                
                }else{
                    self.signInView.frame.origin.y += translation.y
                    self.credentialsView.frame = CGRect(x: self.credentialsView.frame.origin.x - (self.credentialsView.frame.origin.x/self.credentialsView.frame.origin.y)*translation.y*30/475, y: self.credentialsView.frame.origin.y + translation.y*30/475, width: (self.credentialsView.frame.height + translation.y*30/475)*(self.originalSignInViewRect?.width)!/(self.originalSignInViewRect?.height)!, height: self.credentialsView.frame.height+translation.y*30/475)
                    self.setupSignUpView()
                    sender.setTranslation(CGPoint.zero, in: self.view)
                }
            
            }
            break
        case .ended:
            
            DispatchQueue.main.async {
                
            if sender.view!.tag == 0 {

                if (self.credentialsView.frame.origin.y - (self.originalSignUpViewRect?.origin.y)! >= 100)  {


                UIView.animate(withDuration: 0.6, delay: 0, options: [.curveEaseIn], animations: {
                    //self.credentialsView.transform = CGAffineTransform(translationX: 0, y: self.containerView.frame.height)
                      self.credentialsView.frame.origin.y += self.containerView.frame.height
                    //self.signInView.transform = CGAffineTransform(scaleX: (self.originalSignUpViewRect?.width)!/(self.signInView.frame.width), y: (self.originalSignUpViewRect?.height)!/(self.signInView.frame.height))
                   // self.signInView.transform = CGAffineTransform(translationX: 0/*-(self.signInView.frame.origin.x-self.originalSignUpViewRect!.origin.x)*/, y: (self.originalSignUpViewRect!.origin.y-self.signInView.frame.origin.y))
                    
                    self.signInView.frame = CGRect(x: (self.originalSignUpViewRect?.origin.x)!, y: (self.originalSignUpViewRect?.origin.y)!, width: (self.originalSignUpViewRect?.width)!, height: (self.originalSignUpViewRect?.height)!)
                    self.signInView.frame.origin.y += (self.originalSignUpViewRect!.origin.y-self.signInView.frame.origin.y)
                    
                    self.signInLbl.isHidden = false
                    
                    self.logoImageView.frame = CGRect(x: (self.signInView.frame.width-90)/2, y: 55+15, width: 90, height: 90)
                    
                    self.userNameTxtField.frame = CGRect(x: 13, y: 170+15, width: self.signInView.frame.width-26, height: 44)
                    
                    self.signInPasswordTxtField.frame = CGRect(x: 13, y: 227+15, width: self.signInView.frame.width-26, height: 44)
                    
                    self.rememberMeBtn.frame = CGRect(x: 11.5, y: 290+15, width: 17, height: 17)
                    self.rememberMeLbl.frame = CGRect(x: 32.5, y: 288+15, width: 112, height: 21)
                    self.forgotPassword.frame = CGRect(x: self.signInPasswordTxtField.frame.origin.x+self.signInPasswordTxtField.frame.width-137, y: 288+15, width: 137, height: 21)
                    
                    self.signInButton.frame = CGRect(x: self.signInButton.frame.origin.x, y: self.signInView.frame.height-114, width: self.signInView.frame.width-26, height: self.signInButton.frame.height)
                    self.signInWithfbBtn.frame = CGRect(x: self.signInWithfbBtn.frame.origin.x, y: self.signInView.frame.height-57, width: self.signInView.frame.width-26, height: self.signInWithfbBtn.frame.height)
                    
                    
                    
                    self.signInLbl.alpha = 1
                }, completion: { (action) in
                        self.credentialsView.alpha = 0
                    UIView.animate(withDuration: 0.3, delay: 0, options: [.curveEaseInOut], animations: {
                        self.signUplbl.isHidden = true
                        self.credentialsView.backgroundColor = UIColor(red: 237/255, green: 238/255, blue: 239/255, alpha: 1)
                        self.containerView.bringSubviewToFront(self.signInView)
                        
                        self.signInView.layoutIfNeeded()
                    }, completion: { (action) in
                        self.credentialsView.frame = self.originalSignInViewRect!
                        self.setupSignUpView()
                        UIView.animate(withDuration: 0.3, delay: 0, options: [.curveEaseInOut], animations: {
                            self.credentialsView.alpha = 1
                            
                        }, completion: nil)
                        })
                })

            }
            else{
                self.signInView.frame = self.originalSignInViewRect!
                self.credentialsView.frame = self.originalSignUpViewRect!
                self.credentialsView.alpha = 1

              
                self.signInLbl.alpha = 0
                self.userNameTxtField.alpha = 0
                self.signInButton.alpha = 0
                self.signInPasswordTxtField.alpha = 0
                self.signInView.layoutIfNeeded()
            }

            self.signInLbl.frame = CGRect(x: self.signInLbl.frame.origin.x, y: self.signInLbl.frame.origin.y, width: self.signInView.frame.width, height: self.signInLbl.frame.height)
            self.userNameTxtField.frame = CGRect(x: self.userNameTxtField.frame.origin.x, y: self.userNameTxtField.frame.origin.y, width: self.signInView.frame.width-26, height: self.userNameTxtField.frame.height)
            self.signInPasswordTxtField.frame = CGRect(x: self.signInPasswordTxtField.frame.origin.x, y: self.signInPasswordTxtField.frame.origin.y, width: self.signInView.frame.width-26, height: self.signInPasswordTxtField.frame.height)
            self.signInButton.frame = CGRect(x: self.signInButton.frame.origin.x, y: self.signInButton.frame.origin.y, width: self.signInView.frame.width-26, height: self.signInButton.frame.height)
        }else{
         if (self.signInView.frame.origin.y - (self.originalSignInViewRect?.origin.y)! >= 100)  {

            UIView.animate(withDuration: 0.6, delay: 0, options: [.curveEaseInOut], animations: {
                self.signInView.frame.origin.y += self.containerView.frame.height
                self.credentialsView.frame = CGRect(x: (self.originalSignUpViewRect?.origin.x)!, y: (self.originalSignUpViewRect?.origin.y)!, width: (self.originalSignUpViewRect?.width)!, height: (self.originalSignUpViewRect?.height)!)
                self.credentialsView.frame.origin.y += (self.originalSignUpViewRect!.origin.y-self.credentialsView.frame.origin.y)
                self.setupSignUpView()
                self.signUplbl.isHidden = false
            }, completion: { (action) in
                
                    self.signInView.alpha = 0
                
                UIView.animate(withDuration: 0.3, delay: 0, options: [.curveEaseInOut], animations: {
                    self.credentialsView.backgroundColor = UIColor.white
                    self.signInLbl.isHidden = true
                    
                    self.containerView.bringSubviewToFront(self.credentialsView)
                }, completion: { (action) in
                    //self.signInView.frame = self.originalSignInViewRect!
                    self.setupSignInView()
                    UIView.animate(withDuration: 0.3, delay: 0, options: [.curveEaseInOut], animations: {
                         self.signInView.alpha = 1
                        
                    }, completion: nil)
                   
                    })
            })
           

            
            

                }
            }
            }
            break
        default:
            break
        }
        
        
        }
    
    
    @IBAction func didTappedRememberMeBtn(_ sender: Any) {
        
        var imgName = ""
        doRememberMe.toggle()
        
        if doRememberMe{
            imgName = "checked_box_app_background"
        }
        else{
            imgName = "unchecked_app_background"
        }
        rememberMeBtn.setImage(UIImage(named: imgName), for: .normal)
        
    }
    
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {
        return true
    }
    
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -> Bool {
        return true
    }
    
   
}
