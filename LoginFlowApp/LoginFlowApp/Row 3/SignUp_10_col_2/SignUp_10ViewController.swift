//
//  SignUp_10ViewController.swift
//  LoginFlowApp
//
//  Created by Thanos on 28/12/19.
//  Copyright (c) 2019 Thanos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignUp_10DisplayLogic: class
{
  func displaySomething(viewModel: SignUp_10.Something.ViewModel)
}

class SignUp_10ViewController: UIViewController, SignUp_10DisplayLogic, UIGestureRecognizerDelegate
{
  var interactor: SignUp_10BusinessLogic?
  var router: (NSObjectProtocol & SignUp_10RoutingLogic & SignUp_10DataPassing)?
  var position: CGPoint?
  var originalSignInViewRect: CGRect?
  var aspectRatio: CGFloat?

    override var preferredStatusBarStyle: UIStatusBarStyle{
        return .lightContent
    }

    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var containerView: UIView!
    
    @IBOutlet weak var signInView: UIView!
    @IBOutlet weak var createAccountButton: UIButton!
    @IBOutlet weak var navBarView: UIView!
    @IBOutlet weak var credentialsView: UIView!
    
    @IBOutlet weak var backgroundImageView: UIImageView!
    
    @IBOutlet weak var signInLbl: UILabel!
    @IBOutlet weak var logoImageView: UIImageView!
    @IBOutlet weak var userNameTxtField: UITextField!
    @IBOutlet weak var signInPasswordTxtField: UITextField!
    @IBOutlet weak var rememberMeBtn: UIButton!
    @IBOutlet weak var rememberMeLbl: UILabel!
    @IBOutlet weak var forgotPassword: UIButton!
    @IBOutlet weak var signInButton: UIButton!
    @IBOutlet weak var signInWithfbBtn: UIButton!
    
    
    @IBOutlet weak var signUplbl: UILabel!
    @IBOutlet weak var firstnameTxtField: UITextField!
    @IBOutlet weak var lastNameTxtField: UITextField!
    @IBOutlet weak var emailTxtField: UITextField!
    @IBOutlet weak var passwordTxtField: UITextField!
    @IBOutlet weak var confirmpasswordTxtField: UITextField!
    @IBOutlet weak var signUpWithfb: UIButton!
 
    
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SignUp_10Interactor()
    let presenter = SignUp_10Presenter()
    let router = SignUp_10Router()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    if self.revealViewController() != nil {
        self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())
    }
    setupUI()
    originalSignInViewRect = signInView.frame
    doSomething()
  }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.barStyle = .black
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = SignUp_10.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: SignUp_10.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    func setupUI(){
        credentialsView.layer.shadowColor = UIColor.lightGray.cgColor
        credentialsView.layer.shadowOffset = CGSize(width: 1, height: 1)
        credentialsView.layer.shadowOpacity = 1
        
        UIApplication.shared.statusBarView?.backgroundColor = UIColor.appStatusBarRed
        
        navBarView.backgroundColor = .appRed
        createAccountButton.backgroundColor = .appRed
        
        scrollView.frame = CGRect(x: 0, y: 62, width: self.view.frame.width, height: self.view.frame.height-62)
        //self.view.addSubview(scrollView)
        
        containerView.frame = CGRect(x: 0, y: 0, width: self.view.frame.width, height: 667)
        //self.scrollView.addSubview(containerView)
        
        backgroundImageView.frame = containerView.frame
        
        setupSignInView()
        setupSignUpView()
        
        aspectRatio = credentialsView.frame.width/credentialsView.frame.height
        
        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(didPan(_:)))
        let panGesture2 = UIPanGestureRecognizer(target: self, action: #selector(didPan(_:)))
        //panGesture.delegate = self
        self.signInView.addGestureRecognizer(panGesture)
        self.credentialsView.addGestureRecognizer(panGesture2)
        
        
       
    }
    
    func setupSignInView(){
        signInView.frame = CGRect(x: 21.5, y: 40, width: self.view.frame.width-2*21.5, height: 441.5)
        signInLbl.frame = CGRect(x: 0, y: 0, width: signInView.frame.width, height: 63)
        userNameTxtField.frame = CGRect(x: 13, y: 63, width: signInView.frame.width-2*13, height: 44)
        signInPasswordTxtField.frame = CGRect(x: 13, y: 120, width: signInView.frame.width-2*13, height: 44)
        signInButton.frame = CGRect(x: 13, y: 177, width: signInView.frame.width-2*13, height: 44)
    }
    
    func setupSignUpView(){
        credentialsView.frame = CGRect(x: 9, y: 70, width: self.view.frame.width-2*9, height: 475)
        signUplbl.frame = CGRect(x: 0, y: 0, width: credentialsView.frame.width, height: 63)
        firstnameTxtField.frame = CGRect(x: 13, y: 63, width: credentialsView.frame.width-2*13, height: 44)
        lastNameTxtField.frame = CGRect(x: 13, y: 120, width: credentialsView.frame.width-2*13, height: 44)
        emailTxtField.frame = CGRect(x: 13, y: 177, width: credentialsView.frame.width-2*13, height: 44)
        passwordTxtField.frame = CGRect(x: 13, y: 234, width: credentialsView.frame.width-2*13, height: 44)
        confirmpasswordTxtField.frame = CGRect(x: 13, y: 291, width: credentialsView.frame.width-2*13, height: 44)
        createAccountButton.frame = CGRect(x: 13, y: 361, width: credentialsView.frame.width-2*13, height: 44)
        signUpWithfb.frame = CGRect(x: 13, y: 418, width: credentialsView.frame.width-2*13, height: 44)
    }
    
    @objc func didPan(_ sender: UIPanGestureRecognizer){
        
        let initialPosY = signInView.frame.origin.y
        let translation = sender.translation(in: self.view)
        
      switch sender.state {
        case .began, .changed:
           
                print(initialPosY < (initialPosY + translation.y))
           
                
                if signInView.frame.width <= 357 && signInView.frame.width >= (originalSignInViewRect?.width)! {
                    signInView.frame = CGRect(x: signInView.frame.origin.x - (signInView.frame.origin.x/signInView.frame.origin.y)*translation.y, y: signInView.frame.origin.y + translation.y, width: (signInView.frame.height + translation.y)*(originalSignInViewRect?.width)!/(originalSignInViewRect?.height)!, height: signInView.frame.height+translation.y)
                    
                    signInLbl.frame = CGRect(x: signInLbl.frame.origin.x, y: signInLbl.frame.origin.y, width: signInView.frame.width, height: signInLbl.frame.height)
                    userNameTxtField.frame = CGRect(x: userNameTxtField.frame.origin.x, y: userNameTxtField.frame.origin.y, width: signInView.frame.width-26, height: userNameTxtField.frame.height)
                    signInPasswordTxtField.frame = CGRect(x: signInPasswordTxtField.frame.origin.x, y: signInPasswordTxtField.frame.origin.y, width: signInView.frame.width-26, height: signInPasswordTxtField.frame.height)
                    signInButton.frame = CGRect(x: signInButton.frame.origin.x, y: signInButton.frame.origin.y, width: signInView.frame.width-26, height: signInButton.frame.height)
                   
                    
                    if initialPosY < (initialPosY + translation.y){
                        
                            credentialsView.alpha -= 0.3
                            //centerXSignInView.constant = 0
                            //centerXCredentialsView.constant = 0
                            signInLbl.alpha = 1
                            userNameTxtField.alpha = 1
                            signInButton.alpha = 1
                            signInPasswordTxtField.alpha = 1
                        
                            self.signInView.layoutIfNeeded()
                            signInView.backgroundColor = credentialsView.backgroundColor
                            
                    }
                     if initialPosY > (initialPosY + translation.y){
                        
                        credentialsView.alpha += 0.3
                       // centerXSignInView.constant = 0
                       // centerXCredentialsView.constant = 0
                        signInLbl.alpha -= 0.25
                        userNameTxtField.alpha -= 0.25
                        signInButton.alpha -= 0.25
                        signInPasswordTxtField.alpha -= 0.1
                        self.signInView.layoutIfNeeded()
                        signInView.backgroundColor = UIColor(red: 237/255, green: 238/255, blue: 239/255, alpha: 1)
                    }
                    
                    sender.setTranslation(CGPoint.zero, in: self.view)
                }
                
            
            
            break
        case .ended:
            
            
             
            if initialPosY < (initialPosY + translation.y){
                signInView.frame = credentialsView.frame
                credentialsView.alpha = 0
                
               // centerXSignInView.constant = 0
               // centerXCredentialsView.constant = 0
                signInLbl.alpha = 1
                userNameTxtField.alpha = 1
                signInButton.alpha = 1
                signInPasswordTxtField.alpha = 1
                self.signInView.layoutIfNeeded()
            }
            else{
                signInView.frame = originalSignInViewRect!
                credentialsView.alpha = 1
                
              //  centerXSignInView.constant = 0
              //  centerXCredentialsView.constant = 0
                signInLbl.alpha = 0
                userNameTxtField.alpha = 0
                signInButton.alpha = 0
                signInPasswordTxtField.alpha = 0
                self.signInView.layoutIfNeeded()
            }
            
            signInLbl.frame = CGRect(x: signInLbl.frame.origin.x, y: signInLbl.frame.origin.y, width: signInView.frame.width, height: signInLbl.frame.height)
            userNameTxtField.frame = CGRect(x: userNameTxtField.frame.origin.x, y: userNameTxtField.frame.origin.y, width: signInView.frame.width-26, height: userNameTxtField.frame.height)
            signInPasswordTxtField.frame = CGRect(x: signInPasswordTxtField.frame.origin.x, y: signInPasswordTxtField.frame.origin.y, width: signInView.frame.width-26, height: signInPasswordTxtField.frame.height)
            signInButton.frame = CGRect(x: signInButton.frame.origin.x, y: signInButton.frame.origin.y, width: signInView.frame.width-26, height: signInButton.frame.height)
            
            break
        default:
            break
        }
        
        
        }
    
   
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {
        return true
    }
    
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -> Bool {
        return true
    }
    
   
}
