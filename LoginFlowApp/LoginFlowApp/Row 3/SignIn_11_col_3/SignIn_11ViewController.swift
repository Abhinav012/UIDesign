//
//  SignIn_11ViewController.swift
//  LoginFlowApp
//
//  Created by Thanos on 28/12/19.
//  Copyright (c) 2019 Thanos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignIn_11DisplayLogic: class
{
  func displaySomething(viewModel: SignIn_11.Something.ViewModel)
}

class SignIn_11ViewController: UIViewController, SignIn_11DisplayLogic
{
    var interactor: SignIn_11BusinessLogic?
    var router: (NSObjectProtocol & SignIn_11RoutingLogic & SignIn_11DataPassing)?

    var rememberMe: Bool = false
    
    override var preferredStatusBarStyle: UIStatusBarStyle{
        return .lightContent
    }
    
    @IBOutlet weak var logoImageView: UIImageView!
    @IBOutlet weak var signUpButton: UIButton!
    @IBOutlet weak var navBarView: UIView!
    @IBOutlet weak var signInButton: UIButton!
    
    
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SignIn_11Interactor()
    let presenter = SignIn_11Presenter()
    let router = SignIn_11Router()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupUI()
    if self.revealViewController() != nil {
        self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())
    }
    doSomething()
  }
  
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.navigationController?.navigationBar.barStyle = .black
    }
    
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = SignIn_11.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: SignIn_11.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    func setupUI(){
        logoImageView.layer.cornerRadius = logoImageView.frame.width/2
        
        signUpButton.layer.shadowColor = UIColor.lightGray.cgColor
        signUpButton.layer.shadowOffset = CGSize(width: 1, height: 1)
        signUpButton.layer.shadowOpacity = 1.0
        
        signInButton.backgroundColor = UIColor.appRed
    
        navBarView.backgroundColor = UIColor.appRed
    
        UIApplication.shared.statusBarView?.backgroundColor = UIColor.appStatusBarRed
    }
    
    // MARK: Button Action
    
    @IBAction func rememberMe(_ sender: UIButton) {
        rememberMe.toggle()
       
        if rememberMe{
           sender.setImage(UIImage(named: "checked_box"), for: .normal)
        }else {
            sender.setImage(UIImage(named: "unchecked_box"), for: .normal)
        }
       
    }
    
}
